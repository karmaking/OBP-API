// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package code.obp.grpc.api

@SerialVersionUID(0L)
final case class AccountJSONGrpc(
    id: _root_.scala.Predef.String = "",
    label: _root_.scala.Predef.String = "",
    viewsAvailable: _root_.scala.collection.Seq[code.obp.grpc.api.ViewsJSONV121Grpc] = _root_.scala.collection.Seq.empty,
    bankId: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[AccountJSONGrpc] with scalapb.lenses.Updatable[AccountJSONGrpc] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (id != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, id) }
      if (label != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, label) }
      viewsAvailable.foreach(viewsAvailable => __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(viewsAvailable.serializedSize) + viewsAvailable.serializedSize)
      if (bankId != "") { __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, bankId) }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = label
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      viewsAvailable.foreach { __v =>
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__v.serializedSize)
        __v.writeTo(_output__)
      };
      {
        val __v = bankId
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): code.obp.grpc.api.AccountJSONGrpc = {
      var __id = this.id
      var __label = this.label
      val __viewsAvailable = (_root_.scala.collection.immutable.Vector.newBuilder[code.obp.grpc.api.ViewsJSONV121Grpc] ++= this.viewsAvailable)
      var __bankId = this.bankId
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _input__.readString()
          case 18 =>
            __label = _input__.readString()
          case 26 =>
            __viewsAvailable += _root_.scalapb.LiteParser.readMessage(_input__, code.obp.grpc.api.ViewsJSONV121Grpc.defaultInstance)
          case 34 =>
            __bankId = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      code.obp.grpc.api.AccountJSONGrpc(
          id = __id,
          label = __label,
          viewsAvailable = __viewsAvailable.result(),
          bankId = __bankId
      )
    }
    def withId(__v: _root_.scala.Predef.String): AccountJSONGrpc = copy(id = __v)
    def withLabel(__v: _root_.scala.Predef.String): AccountJSONGrpc = copy(label = __v)
    def clearViewsAvailable = copy(viewsAvailable = _root_.scala.collection.Seq.empty)
    def addViewsAvailable(__vs: code.obp.grpc.api.ViewsJSONV121Grpc*): AccountJSONGrpc = addAllViewsAvailable(__vs)
    def addAllViewsAvailable(__vs: TraversableOnce[code.obp.grpc.api.ViewsJSONV121Grpc]): AccountJSONGrpc = copy(viewsAvailable = viewsAvailable ++ __vs)
    def withViewsAvailable(__v: _root_.scala.collection.Seq[code.obp.grpc.api.ViewsJSONV121Grpc]): AccountJSONGrpc = copy(viewsAvailable = __v)
    def withBankId(__v: _root_.scala.Predef.String): AccountJSONGrpc = copy(bankId = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = label
          if (__t != "") __t else null
        }
        case 3 => viewsAvailable
        case 4 => {
          val __t = bankId
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => _root_.scalapb.descriptors.PString(label)
        case 3 => _root_.scalapb.descriptors.PRepeated(viewsAvailable.map(_.toPMessage)(_root_.scala.collection.breakOut))
        case 4 => _root_.scalapb.descriptors.PString(bankId)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = code.obp.grpc.api.AccountJSONGrpc
}

object AccountJSONGrpc extends scalapb.GeneratedMessageCompanion[code.obp.grpc.api.AccountJSONGrpc] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[code.obp.grpc.api.AccountJSONGrpc] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, scala.Any]): code.obp.grpc.api.AccountJSONGrpc = {
    require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    code.obp.grpc.api.AccountJSONGrpc(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.collection.Seq[code.obp.grpc.api.ViewsJSONV121Grpc]],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[code.obp.grpc.api.AccountJSONGrpc] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      code.obp.grpc.api.AccountJSONGrpc(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.collection.Seq[code.obp.grpc.api.ViewsJSONV121Grpc]]).getOrElse(_root_.scala.collection.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ApiProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ApiProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = code.obp.grpc.api.ViewsJSONV121Grpc
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = code.obp.grpc.api.AccountJSONGrpc(
  )
  implicit class AccountJSONGrpcLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, code.obp.grpc.api.AccountJSONGrpc]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, code.obp.grpc.api.AccountJSONGrpc](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def label: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.label)((c_, f_) => c_.copy(label = f_))
    def viewsAvailable: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[code.obp.grpc.api.ViewsJSONV121Grpc]] = field(_.viewsAvailable)((c_, f_) => c_.copy(viewsAvailable = f_))
    def bankId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.bankId)((c_, f_) => c_.copy(bankId = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val LABEL_FIELD_NUMBER = 2
  final val VIEWS_AVAILABLE_FIELD_NUMBER = 3
  final val BANK_ID_FIELD_NUMBER = 4
}
